package br.vandersoncamp.resources;import br.vandersoncamp.simples.business.EntradaItemBusiness;import br.vandersoncamp.simples.model.EntradaItem;import javax.enterprise.context.RequestScoped;import javax.inject.Inject;import javax.ws.rs.*;import javax.ws.rs.core.MediaType;import javax.ws.rs.core.Response;@Path("/entradaitens")@RequestScopedpublic class EntradaItemResource {    @Inject    private EntradaItemBusiness business;    @GET    @Path("{id}")    @Produces(MediaType.APPLICATION_JSON)    public Response buscar(@PathParam("id") Long id) {        EntradaItem entradaItem = business.buscar(id);        if (entradaItem == null) {            return Response.status(Response.Status.NOT_FOUND).build();        }        return Response.ok(entradaItem).build();    }    @GET    @Path("all")    @Produces(MediaType.APPLICATION_JSON)    public Response pesquisar(            @QueryParam("filterField") String filterField,            @QueryParam("filterValue") String filterValue,            @QueryParam("order") String order) {        return Response.ok(business.pesquisar(filterField, filterValue, order)).build();    }    @POST    @Produces(MediaType.APPLICATION_JSON)    @Consumes(MediaType.APPLICATION_JSON)    public Response criar(EntradaItem entradaItem) {        business.criar(entradaItem);        return Response.status(Response.Status.CREATED).entity(entradaItem).build();    }    @PUT    @Path("{id}")    @Produces(MediaType.APPLICATION_JSON)    @Consumes(MediaType.APPLICATION_JSON)    public Response atualizar(EntradaItem entradaItem, @PathParam("id") Long id) {        if (!id.equals(entradaItem.getId())) {            return Response.status(Response.Status.BAD_REQUEST).entity("ID do objeto difere do ID da URL").build();        }        business.atualizar(entradaItem);        return Response.status(Response.Status.OK).entity(entradaItem).build();    }    @DELETE    @Path("{id}")    public Response excluir(@PathParam("id") Long id) {        business.excluir(id);        return Response.status(Response.Status.NO_CONTENT).build();    }}