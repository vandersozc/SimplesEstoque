package br.vandersoncamp.resources;import br.vandersoncamp.simples.business.VendaBusiness;import br.vandersoncamp.simples.model.Venda;import javax.enterprise.context.RequestScoped;import javax.inject.Inject;import javax.ws.rs.*;import javax.ws.rs.core.MediaType;import javax.ws.rs.core.Response;@Path("/vendas")@RequestScopedpublic class VendaResource {    @Inject    private VendaBusiness business;    @GET    @Path("{id}")    @Produces(MediaType.APPLICATION_JSON)    public Response buscar(@PathParam("id") Long id) {        Venda venda = business.buscar(id);        if (venda == null) {            return Response.status(Response.Status.NOT_FOUND).build();        }        return Response.ok(venda).build();    }    @GET    @Path("all")    @Produces(MediaType.APPLICATION_JSON)    public Response pesquisar(            @QueryParam("filterField") String filterField,            @QueryParam("filterValue") String filterValue,            @QueryParam("order") String order) {        return Response.ok(business.pesquisar(filterField, filterValue, order)).build();    }    @POST    @Produces(MediaType.APPLICATION_JSON)    @Consumes(MediaType.APPLICATION_JSON)    public Response criar(Venda venda) {        business.criar(venda);        return Response.status(Response.Status.CREATED).entity(venda).build();    }    @PUT    @Path("{id}")    @Produces(MediaType.APPLICATION_JSON)    @Consumes(MediaType.APPLICATION_JSON)    public Response atualizar(Venda venda, @PathParam("id") Long id) {        if (!id.equals(venda.getId())) {            return Response.status(Response.Status.BAD_REQUEST).entity("ID do objeto difere do ID da URL").build();        }        business.atualizar(venda);        return Response.status(Response.Status.OK).entity(venda).build();    }    @DELETE    @Path("{id}")    public Response excluir(@PathParam("id") Long id) {        business.excluir(id);        return Response.status(Response.Status.NO_CONTENT).build();    }}